/** @license enummapping v1.0.13
 * enummapping.min.js
 * 
 * Copyright (c) sonamu.liao<liaoqingsong@front-end.com.cn>
 * 
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(n="undefined"!=typeof globalThis?globalThis:n||self).enummapping=e()}(this,(function(){"use strict";var n=function(){for(var n={},e=0;e<arguments.length;e++){var t=arguments[e];if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n};function e(n){return"[object Array]"===Object.prototype.toString.call(n)}var t=["$list","$map","$options"],r=["is","eq","in","$is","$eq","$in"];return function(o){var i={},c={},u=function(e){if(Object.prototype.hasOwnProperty.call(o,e)){var u=o[e];if(t.indexOf(e)>-1)throw new Error('The built-in property "'.concat(e,'" cannot be used!'));if(!u||!("code"in u))throw new Error("Code must be specified!");for(var f=0;f<r.length;f++)if(r[f]in u)throw new Error('The built-in property "'.concat(r[f],'" cannot be used!'));if(c["".concat(u.code)])throw new Error('The code "'.concat(u.code,'" has been used!'));var a=n(u,{eq:function(n){return n===u.code},is:function(n){return n===e},"in":function(n){return n.indexOf(e)>-1},$eq:function(n){return n===u.code},$is:function(n){return n===e},$in:function(n){return n.indexOf(e)>-1}});i[e]=a,c["".concat(u.code)]=a}};for(var f in o)u(f);return n(i,c,{$list:function(){var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[],t=[],r=e(n)?n:[n];for(var o in i)if(Object.prototype.hasOwnProperty.call(i,o)){var c=i[o];c.$exclude||c.$in(r)||t.push(c)}return t.sort((function(n,e){return(n.$sort||0)-(e.$sort||0)}))},$map:function(n){var e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if("function"!=typeof n)throw new Error("is not a function!");for(var t=[],r=this.$list(e),o=0;o<r.length;o++)t.push(n(r[o]));return t},$options:function(){var n=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return this.$map((function(n){return{label:n.label||"".concat(n.code),value:n.code}}),n)}})}}));
